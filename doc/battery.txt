*battery.txt*	A statusline/tabline component of Battery information

=============================================================================
CONTENTS					*battery-contents*

Introduction			|battery-introduction|
Usage				|battery-usage|
Interface			|battery-interface|
  Functions			|battery-functions|
  Variables			|battery-variables|


=============================================================================
INTRODUCTION					*battery-introduction*

*battery.vim* is a |statusline| or |tabline| component for Neovim/Vim.
It uses a job feature of Neovim/Vim to retrieve battery informations so that
the plugin won't block the main thread.

The implementation was translated to Vim script from a Bash script found on
https://github.com/b4b4r07/dotfiles/blob/master/bin/battery.


=============================================================================
USAGE						*battery-usage*

Use |battery#component()| like:
>
	set statusline=...%{battery#component()}...
	set tabline=...%{battery#component()}...
<
Or with itchyny/lightline.vim
>
	let g:lightline = {
	      \ ...
	      \ 'component_function': {
	      \   ...
	      \   'battery': 'battery#component',
	      \   ...
	      \ },
	      \ ...
	      \}
<
Additionally, assign 1 to corresponding variables to immediately reflect the
changes to |statusline| or |tabline|.
>
	let g:battery#update_tabline = 1    " For tabline.
	let g:battery#update_statusline = 1 " For statusline.
<

=============================================================================
INTERFACE					*battery-interface*

-----------------------------------------------------------------------------
FUNCTIONS					*battery-functions*

					*battery#backend()*
battery#backend()
	Return a battery backend specified by |g:battery#backend|.

					*battery#update()*
battery#update()
	Call external program if no update process is executed and update the
	internal information.
	It is automatically called every |g:battery#update_interval|
	milliseconds when |battery#watch()| has called.

					*battery#value()*
battery#value()
	Return a current battery percentage.
	Note that the value is a cached value from |battery#update()|.

					*battery#is_charging()*
battery#is_charging()
	Return 1 if an AC power is plugged. Otherwise 0.
	Note that the value is a cached value from |battery#update()|.

					*battery#sign()*
battery#sign()
	Return a unicode sign indicating if an AC power is plugged.
	Note that the sign is built from a cached value from |battery#update()|.
	See also |g:battery#symbol_charging| or |g:battery#symbol_discharging|.

	Sttus		Sign~
	Discharging	|g:battery#symbol_charging|
	Charging	|g:battery#symbol_discharging|

					*battery#graph()*
battery#graph()
	Return a battery indicator bar looks like ██░░░.
	Return a unicode graph indicating the value which looks like "██░░░".
	Note that the graph is built from a cached value from |battery#update()|.
	See |g:battery#graph_indicators| to change looks of the graph.

	Value		Graph (Default)~
	0		░░░░░
	20		█░░░░
	40		██░░░
	60		███░░
	80		████░
	100		█████

					*battery#watch()*
battery#watch()
	Start a timer to call |battery#update()| if there is no timer.
	Users can control the interval by |g:battery#update_interval|.
	Note that this function is automatically called on startup when
	|g:battery_watch_on_startup| is specified.

					*battery#unwatch()*
battery#unwatch()
	Stop an existing timer. Do nothing if there is no timer.

					*battery#component()*
battery#component()
	Return a battery component for |statusline| or |tabline| which looks
	like "♥ 40% ██░░░".
	Users can customize the format by |g:battery#component_format|.
>
	set statusline=%{battery#component()}
<
	See |battery#component_escaped()| for "%!" expression.

					*battery#component_escaped()*
battery#component_escaped()
	Return a "%" escaped battery component that is suite for "%!"
	expression that like  "♥ 40%% ██░░░".
>
	set statusline=%!battery#component_escaped()
<
	See |battery#component()| for "%{}" expression.

-----------------------------------------------------------------------------
VARIABLES					*battery-variables*

					*g:battery_watch_on_startup*
g:battery_watch_on_startup
	1 to automatically call |battery#watch()| on startup.
	Default is 1

					*g:battery#backend*
g:battery#backend
	A backend used to retrieve the battery information.
	It is automatically determined if user has not explicitly specified.
	Currently the following backends are available.

	Name		Description~
	dummy		A dummy backend which does nothing
	pmset		For Mac OS X
	ioreg		For Mac OS X
	linux		For Linux
	powershell	For Windows

					*g:battery#update_interval*
g:battery#update_interval
	A millisecond interval used to update the battery information when
	|battery#watch| has called.
	Use smaller value when you prefer to reflect the current status
	immediately.
	Default is 30000.

					*g:battery#update_tabline*
g:battery#update_tabline
	1 to update |tabline| when the battery information has retrieved.
	It is required to immediately update your tabline whenever the battery
	information has retrieved.
	Users should not enable this option unless the |battery#component()| is
	used in |tabline|.
	Default is 0.

					*g:battery#update_statusline*
g:battery#update_statusline
	1 to update |statusline| when the battery information has retrieved.
	It is required to immediately update your tabline whenever the battery
	information has retrieved.
	Users should not enable this option unless the |battery#component()| is
	used in |statusline|.
	Default is 0.

					*g:battery#component_format*
g:battery#component_format
	A string format used in |battery#component()|.

	Character	Represent~
	%v		A value of the battery
	%s		A sign indicating if an AC power is plugged
	%g		A graph
	%x		x
	%%		%

	Default is "%s %v%% %g"

					*g:battery#graph_indicators*
g:battery#graph_indicators
	A |List| of |String| that indicate the current battery status as a
	graph.

	Use the following with nerd font.
>
	let g:battery#graph_indicators = [
	      \ '',
	      \ '',
	      \ '',
	      \ '',
	      \ '',
	      \]
<
	Default value is the following
>
	let g:battery#graph_indicators = [
	      \ '░░░░░',
	      \ '█░░░░',
	      \ '██░░░',
	      \ '███░░',
	      \ '████░',
	      \ '█████',
	      \]
<
					*g:battery#graph_symbol_fill*
					*g:battery#graph_symbol_null*
					*g:battery#graph_width*
g:battery#graph_symbol_fill
g:battery#graph_symbol_null
g:battery#graph_width
	DEPRECATED:
	These configuration does nothing due to |g:battery#graph_indicators|.


=============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
